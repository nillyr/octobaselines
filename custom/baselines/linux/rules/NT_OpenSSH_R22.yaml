# @copyright Copyright (c) 2021 Nicolas GRELLETY
# @license https://opensource.org/licenses/GPL-3.0 GNU GPLv3
# @link https://gitlab.internal.lan/octo-project/octobaselines
# @link https://github.com/nillyr/octobaselines
# @since 1.0.0b

id: NT_OpenSSH_R22
title: AllowUsers, AllowGroups
description: |
  OpenSSH offre beaucoup de fonctionnalités qui peuvent poser des problèmes de sécurité lorsqu'elles sont exploitées à des fins malveillantes : accès shell, redirections, envoi/téléchargement de binaires. Il faut donc restreindre les accès comptes au strict nécessaire.

  Sous OpenSSH, la directive "AllowUsers" permet de spécifier la liste des utilisateurs autorisés à se connecter au service SSH. Dans le cas où un groupe d'utilisateurs est concerné (administrateurs, utilisateurs avec pouvoir, etc.), il est recommandé d'utiliser la directive "AllowGroups".

  Les accès à un service doivent être restreints aux utilisateurs qui en ont un besoin justifié. Cette restriction doit s'appliquer en droits positifs : uniquement ceux explicitement autorisés ont le droit de se connecter en SSH sur un hôte, et éventuellement en provenance d'adresses IP spécifiées.

collection_cmd: |
  if is_package_installed openssh-server; then
    is_package_installed sudo && SUDO_CMD="sudo"
    IFS=" " read -r -a config_files <<< "$(get_all_sshd_config_files)"
    for file in "${config_files[@]}"; do
      printf "File: %s\n%s\n\n" "$(${SUDO_CMD} ls -lZ "${file}")" "$(${SUDO_CMD} cat "${file}" 2>/dev/null)" >> NT_OpenSSH_R22_config_files.txt
      printf "File: %s\n%s\n\n" "$(${SUDO_CMD} ls -lZ "${file}")" "$(${SUDO_CMD} sshd -T -f "${file}" 2>/dev/null)" >> NT_OpenSSH_R22_running_configs.txt
    done
  else
    : > NT_OpenSSH_R22.txt
  fi

check: |
  ################################################################################
  LANG=en_US.utf8

  RULE_ID="NT_OpenSSH_R22"
  HOSTNAME="$(hostname -f)"
  DATE="$(date +"%Y/%m/%d")"

  STATUS=RESULT_CHECK_PASS

  if is_package_installed openssh-server; then
    is_package_installed sudo && SUDO_CMD="sudo"
    IFS=" " read -r -a config_files <<< "$(get_all_sshd_config_files)"
    for file in "${config_files[@]}"; do
      if { ! ${SUDO_CMD} sshd -T -f "${file}" | grep -E "^\s*(allowusers|allowgroups)\s(\S+).*$" ; } &>/dev/null; then
        STATUS=RESULT_CHECK_FAIL
      fi
      if { ${SUDO_CMD} sshd -T -f "${file}" | grep -E "^\s*(denyusers|denygroups)\s(\S+).*$" ; } &>/dev/null; then
        STATUS=RESULT_CHECK_FAIL
      fi
    done

  else
    STATUS=RESULT_CHECK_NA
  fi

  printf "RULE_ID: %s\nHOSTNAME: %s\nDATE: %s\n\n%s\n" "${RULE_ID}" "${HOSTNAME}" "${DATE}" "${STATUS}" | encrypt_output
verification_type: CHECK_REGEX
expected: ^\s*(RESULT_CHECK_PASS|RESULT_CHECK_NA)
recommendation: |
  Nous recommandons de configurer les restrictions d'accès afin que seuls les utilisateurs ayant le besoin d'accéder à la machine puissent se connecter.

  Pour cela, nous recommandons d'activer le service en écoute uniquement sur l'interface d'administration puis de configurer les directives "AllowUsers" et "AllowGroups" en fonction des besoins.

  Voir aussi :

  - https://www.man7.org/linux/man-pages/man5/sshd_config.5.html

level: minimal
severity: medium
references:
  - https://www.ssi.gouv.fr/guide/recommandations-de-securite-relatives-a-un-systeme-gnulinux/
  - https://www.ssi.gouv.fr/guide/recommandations-pour-un-usage-securise-dopenssh/
