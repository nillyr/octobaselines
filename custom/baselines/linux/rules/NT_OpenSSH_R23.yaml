id: NT_OpenSSH_R23
title: Restriction de l'environnement utilisateur
description: |
  Les variables d'environnement peuvent grandement modifier le fonctionnement attendu de programmes. Certaines peuvent avoir des répercussions sur la sécurité, notamment quand elles altèrent la configuration ou l'exécution (LD_PRELOAD, LD_LIBRARY_PATH, etc.).

  L'altération de l'environnement par un utilisateur doit être bloquée par défaut. Les variables autorisées à la modification par le client doivent être sélectionnées au cas par cas.

collection_cmd: |
  if is_package_installed openssh-server; then
    is_package_installed sudo && SUDO_CMD="sudo"
    IFS=" " read -r -a config_files <<< "$(get_all_sshd_config_files)"
    for file in "${config_files[@]}"; do
      printf "File: %s\n%s\n\n" "$(${SUDO_CMD} ls -lZ "${file}")" "$(${SUDO_CMD} cat "${file}" 2>/dev/null)" >> NT_OpenSSH_R23_config_files.txt
      printf "File: %s\n%s\n\n" "$(${SUDO_CMD} ls -lZ "${file}")" "$(${SUDO_CMD} sshd -T -f "${file}" 2>/dev/null)" >> NT_OpenSSH_R23_running_configs.txt
    done
  else
    : > NT_OpenSSH_R23.txt
  fi

check: |
  ################################################################################
  LANG=en_US.utf8

  RULE_ID="NT_OpenSSH_R23"
  HOSTNAME="$(hostname -f)"
  DATE="$(date +"%Y/%m/%d")"

  STATUS=RESULT_CHECK_PASS

  if is_package_installed openssh-server; then
    is_package_installed sudo && SUDO_CMD="sudo"
    IFS=" " read -r -a config_files <<< "$(get_all_sshd_config_files)"
    for file in "${config_files[@]}"; do
      if { ! ${SUDO_CMD} sshd -T -f "${file}" | grep -E "^\s*permituserenvironment\s+no$" ; } &>/dev/null; then
        STATUS=RESULT_CHECK_FAIL
      fi
    done

  else
    STATUS=RESULT_CHECK_NA
  fi

  printf "RULE_ID: %s\nHOSTNAME: %s\nDATE: %s\n\n%s\n" "${RULE_ID}" "${HOSTNAME}" "${DATE}" "${STATUS}" | encrypt_output
verification_type: CHECK_REGEX
expected: ^\s*(RESULT_CHECK_PASS|RESULT_CHECK_NA)
recommendation: |
  Nous recommandons de bloquer l'altération de l'environnement par un utilisateur se connectant à la machine au travers du service SSH.

  Pour cela, le _playbook_ Ansible suivant peut être utilisé :
  [source%linenums,yaml]
  [options="nowrap"]
  ----
  - name: Block user environment
    hosts: all
    become: true

    ansible.builtin.lineinfile:
      path: "{{ item }}"
      regexp: "^\s*PermitUserEnvironment"
      line: "PermitUserEnvironment no"
    with_items:
      - /etc/ssh/sshd_config
    notify:
      - Restart SSH service

    handlers:
      - name Restart SSH service
        become: true
        ansible.builtin.service:
          name: ssh
          state: restarted
  ----

  Voir aussi :

  - https://www.man7.org/linux/man-pages/man5/sshd_config.5.html
  - https://docs.ansible.com/ansible/latest/collections/ansible/builtin/lineinfile_module.html

level: minimal
severity: high
references:
  - https://www.ssi.gouv.fr/guide/recommandations-de-securite-relatives-a-un-systeme-gnulinux/
  - https://www.ssi.gouv.fr/guide/recommandations-pour-un-usage-securise-dopenssh/
